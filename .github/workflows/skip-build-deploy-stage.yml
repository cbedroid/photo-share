# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# More details on this workflow setup can be found here: https://stackoverflow.com/questions/58457140/dependencies-between-workflows-on-github-actions

name: Skip-Build Deploy to Stage

on:
  workflow_dispatch:

env:
  DJANGO_IMAGE: ghcr.io/cbedroid/photo-share/django
  NGINX_IMAGE: ghcr.io/cbedroid/photo-share/nginx-proxy
  HEROKU_APP_NAME: ${{ secrets.HEROKU_STAGE_APP_NAME }}
  DJANGO_TAG: master
  ENV_FILE: .env.stage


jobs:
  # Deploy to Stage Instance
  deploy:
    name: Deploy to Stage
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Set Django Image Tag
        if: github.ref != 'refs/heads/master'
        run: echo "DJANGO_TAG=dev" >> $GITHUB_ENV

      - name: Add Django env vars to file
        run: |
          echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> ${{env.ENV_FILE}}
          echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> ${{env.ENV_FILE}}
          echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> ${{env.ENV_FILE}}
          echo DEBUG=0 >> ${{env.ENV_FILE}}
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> ${{env.ENV_FILE}}
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> ${{env.ENV_FILE}}
          echo SQL_ENGINE=django.db.backends.postgresql >> ${{env.ENV_FILE}}
          echo DATABASE=postgres >> ${{env.ENV_FILE}}
          echo SQL_DATABASE=${{ secrets.DO_SQL_DATABASE }} >> ${{env.ENV_FILE}}
          echo SQL_USER=${{ secrets.DO_SQL_USER }} >> ${{env.ENV_FILE}}
          echo SQL_PASSWORD=${{ secrets.DO_SQL_PASSWORD }} >> ${{env.ENV_FILE}}
          echo SQL_HOST=${{ secrets.DO_SQL_HOST }} >> ${{env.ENV_FILE}}
          echo SQL_PORT=${{ secrets.DO_SQL_PORT }} >> ${{env.ENV_FILE}}

      # Digital Ocean Test Instance Docker Database variables
      - name: Add Postgres env vars to file
        run: |
          echo POSTGRES_DB=${{ secrets.DO_SQL_DATABASE }} >> ${{env.ENV_FILE}}
          echo POSTGRES_USER=${{ secrets.DO_SQL_USER }} >> ${{env.ENV_FILE}}
          echo POSTGRES_PASSWORD=${{ secrets.DO_SQL_PASSWORD }} >> ${{env.ENV_FILE}}
          echo POSTGRES_PORT=${{ secrets.DO_SQL_PORT }} >> ${{env.ENV_FILE}}
          # Docker Email Support
          echo SUPPORT_EMAIL_HOST=${{ secrets.EMAIL_SUPPORT_HOST }} >> ${{env.ENV_FILE}}
          echo SUPPORT_EMAIL_PORT=${{ secrets.EMAIL_SUPPORT_PORT }} >> ${{env.ENV_FILE}}
          echo SUPPORT_EMAIL_ADDRESS=${{ secrets.EMAIL_SUPPORT_ADDRESS }} >> ${{env.ENV_FILE}}
          echo SUPPORT_EMAIL_PASSWORD=${{ secrets.EMAIL_SUPPORT_PASSWORD }} >> ${{env.ENV_FILE}}

          # Docker Recaptcha Support
          #echo RECAPTCHA_PUBLIC_KEY=${{ secrets.RECAPTCHA_PUBLIC_KEY }} >> ${{env.ENV_FILE}}
          #echo RECAPTCHA_PRIVATE_KEY=${{ secrets.RECAPTCHA_PRIVATE_KEY }} >> ${{env.ENV_FILE}}

      # NGINX -->  No Nginx on Heroku -- Add configaration if you are not deploying to heroku

      - name: Add image names to env file for docker-compose
        run: |
          echo DJANGO_IMAGE=${{ env.DJANGO_IMAGE }}:${{ env.DJANGO_TAG }} >> ${{ env.ENV_FILE }}
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }}:master >> ${{ env.ENV_FILE}}

      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_TOKEN }}
        run: heroku container:login

      - name: Set Heroku Environment variables
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_TOKEN }}
        run: |
          heroku config:set DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set DEBUG=0 -a ${{ env.HEROKU_APP_NAME}}
          heroku config:set SECRET_KEY=${{ secrets.SECRET_KEY }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set DJANGO_ALLOWED_HOSTS=${{ secrets.STAGE_ALLOWED_HOSTS }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SQL_ENGINE=django.db.backends.postgresql -a ${{ env.HEROKU_APP_NAME}}
          heroku config:set SQL_DATABASE=${{ secrets.STAGE_SQL_DATABASE }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SQL_USER=${{ secrets.STAGE_SQL_USER }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SQL_PASSWORD=${{ secrets.STAGE_SQL_PASSWORD }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SQL_HOST=${{ secrets.STAGE_SQL_HOST }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SQL_PORT=${{ secrets.STAGE_SQL_PORT }} -a ${{ env.HEROKU_APP_NAME }}

          # Django Email Support
          heroku config:set SUPPORT_EMAIL_HOST=${{ secrets.SUPPORT_EMAIL_HOST }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SUPPORT_EMAIL_PORT=${{ secrets.SUPPORT_EMAIL_PORT }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SUPPORT_EMAIL_ADDRESS=${{ secrets.SUPPORT_EMAIL_ADDRESS }} -a ${{ env.HEROKU_APP_NAME }}
          heroku config:set SUPPORT_EMAIL_PASSWORD=${{ secrets.SUPPORT_EMAIL_PASSWORD }} -a ${{ env.HEROKU_APP_NAME }}

          # Recaptcha Support
          # heroku config:set RECAPTCHA_PUBLIC_KEY=${{ secrets.RECAPTCHA_PUBLIC_KEY }} -a ${{ env.HEROKU_APP_NAME }}
          # heroku config:set RECAPTCHA_PRIVATE_KEY=${{ secrets.RECAPTCHA_PRIVATE_KEY }} -a ${{ env.HEROKU_APP_NAME }}
          # Redis Support
          heroku config:set DOCKER_IMAGES=${{ env.DJANGO_IMAGE }}:${{ env.DJANGO_TAG }} -a ${{ env.HEROKU_APP_NAME }}

      - name: Add image names to env file for docker-compose
        run: echo DJANGO_IMAGE=${{ env.DJANGO_IMAGE }}:${{ env.DJANGO_TAG }} >> .env

      - name: Deploy to Heroku Test Container Registry
        uses: gonuit/heroku-docker-deploy@v1.3.2 # GitHub action name (leave it as it is).
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_TOKEN }}
          heroku_app_name: ${{ env.HEROKU_APP_NAME }}
          dockerfile_directory: ./django
          dockerfile_name: Dockerfile.stage
          docker_options: "--no-cache"
          process_type: web
